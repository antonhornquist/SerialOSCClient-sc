title:: Using SerialOSCClient
summary:: Notes on SuperCollider SerialOSC device (monome, arc) support provided by the SerialOSCClient library
categories:: External Control
related:: Classes/SerialOSCClient, Guides/UsingMIDI

section::Introduction

SerialOSCClient provides plug'n'play support for monome (link::http://monome.org::) grids, arcs and other SerialOSC compliant devices.

At its core link::Classes/SerialOSCClient:: and its related classes are to SerialOSC devices what link::Classes/MIDIClient:: and its related classes in the SuperCollider standard library are to MIDI devices.

In addition, it's possible to instantiate SerialOSCClient for single-grid, single-enc or one-grid-and-one-enc use cases. SerialOSCClient instances constitute self-contained clients decoupled from the devices controlling it at any given time. SerialOSCClient callback functions and instance methods are provided for update of led state and responding to incoming events. Built-in routing capabilities are used to map devices to clients.

subsection::Basic Example

Initialize SerialOSCClient.

code::
SerialOSCClient.init;
::

Set led state of a grid:

code::
SerialOSCGrid.ledSet(0, 0, 1); // set the top-leftmost led of default grid (first one attached) to lit
SerialOSCGrid.ledSet(0, 0, 0); // set the top-leftmost led of default grid (first one attached) to unlit
::

Listen to button events from a grid:

code::
// a press or release of any button on any attached grid posts event state information to Post Window
GridKeydef(\test, { |x, y, state| (if (state == 1, "key down", "key up") + "at (%,%)".format(x, y)).postln });

GridKeydef(\test).free; // or CmdPeriod frees responder
::

Let a specific grid button toggle its led:

code::
(
a=false; // led state, initially unlit
GridKeydef.press(\toggle, { SerialOSCGrid.ledSet(0, 0, a = a.not) }, 0, 0, 'default'); // a press on top-leftmost button on default grid will toggle its button led
)
GridKeydef.press(\toggle).free; // free responder
::

subsection::Client Example

Self-contained clients are created by instantiating SerialOSCClient. This is recommended for single-grid, single-enc or one-grid-and-one-enc use.

code::
(
// the toggle state example above as a client
c = SerialOSCClient.grid("Hello World") { |client|
	var lit = false; // toggle state, initially unlit
	var updateLed = { client.ledSet(0, 0, lit) }; // function that updates led state of button 0,0

	client.gridRefreshAction = updateLed; // when a new device is routed to this client led state will be updated

	client.gridKeyAction = { |client, x, y, state|
        if ((x == 0) and: (y == 0) and: (state == 1)) { // when button 0,0 is pressed,
			lit = lit.not; // led state is toggled
			updateLed.value; // and led is refreshed
		}
	};
};
)

SerialOSCClient.postRoutings; // the client will automatically be routed to a grid connected to the computer

g=c.grid; // get routed grid
g.disconnect; // disconnecting routed grid from SerialOSCClient,
SerialOSCClient.postRoutings; // will detach it from the client

g.connect; // connecting the grid again,
SerialOSCClient.postRoutings; // will reroute it to the client and refresh the leds according to the current state of the client

c.free; // or CmdPeriod frees client
::

More examples below in the link::#Examples:: section.

section::Usage

subsection::Initialization

Before SerialOSC devices can be interacted with SerialOSCClient must be initialized. Just like code::MIDIClient.init:: initializes MIDIClient a call to method code::SerialOSCClient.init:: initializes SerialOSCClient.

code::
SerialOSCClient.init; // will probe for attached devices, autoconnect them, and automatically update device list upon devices getting attached or detached to the computer
::

Unlike MIDIClient, SerialOSCClient initialization is performed asynchronously. If code needs to be evaluated after initialization has completed a completionFunc may be supplied to the init method.

code::
// as above with a completion function
(
SerialOSCClient.init(completionFunc: {
	if (SerialOSCGrid.default.notNil) {
		SerialOSCGrid.default + "is the default grid.".postln;
	} {
		"No default grid is available.".postln;
	}
});
)
::

subsection::Discovering devices

During initialization SerialOSCClient retrieves information on SerialOSC devices currently attached to the computer and stores an instance of SerialOSCGrid or SerialOSCEnc for each device in the code::SerialOSCClient.devices:: list.

code::
SerialOSCClient.init;
SerialOSCClient.devices; // all devices attached to the computer
::

SerialOSCGrid and SerialOSCEnc classes also retain discovered devices of each type in their code::*all:: lists.

code::
SerialOSCGrid.all; // all grid devices connected to the computer
SerialOSCEnc.all; // all encoder devices connected to the computer
::

SerialOSCClient by default automatically updates the code::SerialOSCClient.devices:: list as devices are attached to and detached from the computer. This may be changed by setting argument code::autodiscover:: of code::*init:: to false. See link::#Disabling device discovery::.

subsection::Default devices

Default grid and encoder devices are automatically set up the first time a device of either kind is attached and connected.

code::
SerialOSCGrid.default; // default grid
SerialOSCEnc.default; // default encoder
::

The default may be changed.

code::
SerialOSCGrid.default = SerialOSCGrid.all.choose; // if multiple grids are attached one of them is randomly set as default
::

subsection::Updating led and ring state

Each discovered device reflected as a SerialOSCGrid or SerialOSCEnc instance has methods for updating led and ring state.

code::
g=SerialOSCGrid.all.first; // assumes a grid is attached
g.ledSet(0, 1, 1);
g.ledSet(0, 1, 0);
g.ledSet(0, 1, true); // booleans works too
g.ledSet(0, 1, false);

e=SerialOSCEnc.all.first; // assumes an enc is attached
e.ringSet(0, 0, 15);
e.ringSet(0, 0, 0);
::

Leds of default SerialOSCGrid and SerialOSCEnc instances (if any is set) may be updated using class methods.

code::
SerialOSCGrid.ledSet(4, 1, true); // a grid attached and set as default will receive this message

// ... is the same thing as...
SerialOSCGrid.default.notNil.if {
	SerialOSCGrid.default.ledSet(4, 1, true);
};

SerialOSCEnc.ringSet(0, 0, 15); // an encoder attached and set as default will receive this message
::

subsection::Connecting devices

SerialOSCClient can update led state of any discovered device but can only respond to events from devices that are connected to SerialOSCClient. Devices are by default automatically connected as they are discovered. This may be changed by setting argument code::autoconnect:: of code::*init:: to false. See link::#Manually connecting devices::.

code::
SerialOSCClient.connectedDevices; // list of all devices attached to the computer and connected to SerialOSCClient
::

Discovered grids and encs in the code::SerialOSCClient.devices:: list can explicitly be disconnected and connected.

code::
SerialOSCClient.default.isConnected; // if at least one grid is used they have been autoconnected and one is set as default
SerialOSCClient.connectedDevices; // all connected devices
SerialOSCClient.default.disconnect; // disconnect the default
SerialOSCClient.connectedDevices; // default is no longer in the list
SerialOSCClient.default.connect; // reconnect
SerialOSCClient.connectedDevices; // it's in the list again
::

subsection::Responding to incoming events

A range of SerialOSC specific *Func and *def classes are used to respond to events from devices connected to SerialOSCClient:

list::
## link::Classes/GridKeyFunc:: and link::Classes/GridKeydef:: responds to grid key state changes
## link::Classes/EncDeltaFunc:: and link::Classes/EncDeltadef:: responds to encoder position changes
## link::Classes/EncKeyFunc:: and link::Classes/EncKeydef:: responds to encoder key state changes
## link::Classes/TiltFunc:: and link::Classes/Tiltdef:: responds to grid tilt sensor changes
::

For instance, to listen to key state changes from a connected grid a link::Classes/GridKeyFunc:: responder may be used:

code::
a=GridKeyFunc.press({ "Hello World".postln }); // pressing any button on an attached grid posts Hello World
b=GridKeyFunc.release({ "Bye, World".postln }); // releasing any button on an attached grid posts Bye, world
::

As with standard SuperCollider *Func and *def classes (link::Classes/MIDIFunc::/link::Classes/MIDIdef::/link::Classes/OSCFunc::/link::Classes/OSCdef::, etc) it's possible to filter SerialOSC *Func and *def objects by different properties such as x, y, state and device (for GridKeyFunc/def). If no filtering constraints are provided all events pass through.

code::
c=GridKeyFunc.press({ "Hello".postln }, 0, 0); // pressing top-leftmost button posts Hello
d=GridKeyFunc.release({ "Bye".postln }, 0, 0); // releasing top-leftmost button posts Bye

// pressing top-most button in second column auditions a sinewave
s.boot;
e=GridKeyFunc.press({ g = {SinOsc.ar(4000.exprand)}.play }, 1, 0);
f=GridKeyFunc.release({ g.release }, 1, 0);
::

Functions triggered by the responder object are passed details of the event type. All SerialOSC *Func and *def objects are passed an OSC timestamp and what device an event originated from. GridKeyFunc/def also pass x, y, state of the key event. Refer to the documentation of each class for further details on arguments.

code::
// pressing buttons in the third column will audition different degrees of default instrument
h=Array.fill(16);
i=GridKeyFunc.press({ |x, y, state, timestamp, device| h[y] = (degree: y).play }, 2);
j=GridKeyFunc.release({ |x, y, state, timestamp, device| h[y].release }, 2);
::

In multi-grid or multi-arc scenarios mapping to a device by id or to the default device of a kind using the 'default' symbol is needed to differentiate incoming events.

code::
k=GridKeyFunc.press({ |x, y, state, timestamp, device| "the default grid was pressed at" + x ++ "x" ++ y }, device: 'default');
l=GridKeyFunc.press({ |x, y, state, timestamp, device| "device with id 'm01231' was pressed at" + x ++ "x" ++ y }, device: \id -> 'm01231');
::

Responders are freed individually, all-at-once or using CmdPeriod.

code::
a.free; // free individual responder object
b.free;

GridKeyFunc.freeAll; // free all GridKeyFunc responders
::

subsection::Device information

SerialOSCGrid and SerialOSCEnc instances provide information of each device. 

code::
a=SerialOSCGrid.default; // assumes a grid is attached and set as default
a.id;
a.type;
a.port;
a.numCols; // number of columns taking rotation into account
a.numRows; // number of rows taking rotation into account
a.rotation;

b=SerialOSCEnc.default; // assumes an enc is attached and set as default
b.id;
b.type;
b.port;
b.numRings;
::

Specs describing grid bounds, enc ring numbers and led levels are also available.

code::
g=SerialOSCGrid.all.first;
g.ledXSpec; // per instance
g.ledYSpec; // per instance
SerialOSCGrid.ledXSpec; // ledXSpec of SerialOSCGrid.default, if any is set
SerialOSCGrid.ledYSpec; // ledXSpec of SerialOSCGrid.default, if any is set

e=SerialOSCEnc.all.first;
e.nSpec; // per instance
SerialOSCEnc.nSpec; // nSpec of SerialOSCEnc.default, if any is set

SerialOSCGrid.ledLSpec; // number of led intensity levels spec
SerialOSCEnc.ledLSpec; // number of led intensity levels spec

// in use
SerialOSCGrid.ledSet(SerialOSCGrid.xSpec.rand, SerialOSCGrid.ySpec.rand, [true, false].choose);

SerialOSCGrid.ledLevelSet(SerialOSCGrid.xSpec.rand, SerialOSCGrid.ySpec.rand, SerialOSCGrid.ledLSpec.rand);

SerialOSCEnc.ringSet(SerialOSCenc.nSpec.rand, SerialOSCEnc.xSpec.rand, SerialOSCEnc.ledLSpec.choose);

(
fork {
	10.do {
		SerialOSCGrid.ledSet(SerialOSCGrid.xSpec.rand, SerialOSCGrid.ySpec.rand, [true, false].choose);
		SerialOSCEnc.ringRange(SerialOSCenc.nSpec.rand, SerialOSCEnc.xSpec.rand, SerialOSCEnc.xSpec.rand, SerialOSCEnc.ledLSpec.choose);
		0.1.wait;
	}
}
)
::

subsection::Changing device rotation

Grid rotation may be changed using link::Classes/SerialOSCGrid#-rotation:: (for any grid instance) and link::Classes/SerialOSCGrid#*rotation:: (for default grid, if any is set).

subsection::Activating tilt sensors

Grid tilt sensors may be activated using link::Classes/SerialOSCGrid#*activateTilt:: (for any grid instance) and link::Classes/SerialOSCGrid#-activateTilt:: (for default grid, if any is set).

section::Creating clients

It's recommended to create instances of SerialOSCClient for single-grid, single-enc or one-grid-and-one-enc use, specify device requirements needed for each instance and rely on SerialOSCClient's built in routing capabilites for mapping devices to a client. This way device ids, ports and prefixes need not be considered when developing an app for a SerialOSC compliant grid, arc or grid-and-arc configuration.

Callback functions are provided for clients to facilitate device refresh when new devices are routed and resource disposal when a client is freed:

code::
// TODO
::

Instance methods are used to update led state:

code::
// TODO
::

Callback functions are also provided for responding to incoming events.

code::
x=SerialOSCClient.grid("My grid app"); // a possible default grid attached will be automatically routed to this client
(
x.onGridAttached = { |client| // onGotGrid, onGridFocused
	client.ledSet
};
x.onGridDetached = { |client| // onLostGrid, onLostGridFocus
	client.ledSet
};
x.gridKeyPressedAction = { |client, x, y, state|
};
x.gridKeyReleasedAction = { |client, x, y, state|
};
)
::

code::
// a possible default enc attached will be automatically routed to this client
y=SerialOSCClient.enc("My encoder app") { |client| // DSL style
	client.onEncAttached = { |client|
		client.ringSet
	};
	client.onEncDetached = { |client|
		client.ringSet
	};
	client.encDeltaAction = { |client, n, delta|
		client.ringSet
	};
}
::

code::
z=SerialOSCClient.gridEnc("An app that uses both grid and encoder");
(
z.onEncAttached = { |client|
	client.ringSet
};
z.onEncDetached = { |client|
	client.ringSet
};
z.encDeltaAction = { |client, n, delta|
	client.ringSet
};
)
::

code::
SerialOSCClient.all; // all clients

SerialOSCClient.postRoutings; // see what devices are routed to clients
::

subsection::Routing devices to clients

SerialOSCClient will automatically try to route any client that has been created with the autoroute argument set to 'true' (the default). It's possible to route programmatically:

code::
SerialOSCClient.route(SerialOSCGrid.default, z); // route programmatically
z.routeGrid(SerialOSCGrid.default); // route programmatically
SerialOSCClient.route(SerialOSCEnc.default, z);
z.routeGrid(SerialOSCEnc.default);

SerialOSCClient.unroute(SerialOSCGrid.default); // remove from its client
SerialOSCClient.unroute(SerialOSCEnc.default); // remove from its client

SerialOSCClient.routeGui; // graphical routing TODO

x.remove;
y.remove;
z.remove;
::

section::Advanced

subsection::Using multiple devices

If several devices of the same type are to be used responder functions can be configured to filter a predetermined device. Examples below assumes two grids having id 'm1234' and 'm5678' are attached and connected to SerialOSCClient.

code::
GridKeydef.press(\grid1Press, { |x, y| "first grid pressed at %x%".format(x, y).postln }, device: id -> 'm1234');
GridKeydef.press(\grid2Press, { |x, y| "second grid pressed at %x%".format(x, y).postln }, device: id -> 'm5678');
::

Alternatively, fetch instances from code::SerialOSCClient.all:: and match by instance.

code::
a=SerialOSCGrid.all[0];
b=SerialOSCGrid.all[1];

GridKeydef.press(\grid1Press, { |x, y| "first grid pressed at %x%".format(x, y).postln }, device: a);
GridKeydef.press(\grid2Press, { |x, y| "second grid pressed at %x%".format(x, y).postln }, device: b);

GridKeydef.freeAll; // free responders
::

With multiple devices led state is typically not sent to a default device but routed to predetermined devices depending on app logic.

code::
a.ledSet(0, 0, true);
b.ledSet(6, 2, true);
::

If possible creating clients (link::#Creating clients::) is preferable.

subsection::Disabling device discovery

SerialOSCClient by default automatically discovers attached and detached devices and maintains an up-to-date list of devices in code::SerialOSCClient.devices::. Autodiscovery may be disabled by setting code::*init::'s code::autodiscover:: argument to false. With autodiscovery disabled SerialOSCClient must be reinitialized in order to refresh the list of devices after device configuration has changed. Reinitialization of SerialOSCClient is possible even when autodiscovery is enabled and may be needed if there are hiccups in the communication between the SerialOSC server daemon and SerialOSCClient.

subsection::Manually connecting devices

In order to respond to incoming events a device not only needs to be discovered but also connected to SuperCollider.

SerialOSCClient by default automatically connects discovered devices. This may raise issues if multiple SerialOSC devices are attached and all devices are not inteded for use for SuperCollider. Autoconnection may be disabled by setting code::*init::'s code::autoconnect:: argument to false. When autoconnect is disabled devices will have to be manually connected to SuperCollider using class method code::SerialOSCClient.connect:: or instance method code::SerialOSCDevice.connect::

code::

// example code for manually connecting a device
SerialOSCClient.init(autoconnect: false);

SerialOSCClient.connect('m1234'); // connect a device by id

a=SerialOSCClient.devices.first; // alternatively, lookup a device in the list...
a.connect; // ... and connect it
::

subsection::Dependancy support

It is possible to observe as new SerialOSC devices are attached/detached, connected/disconnected and routed/unrouted to and from clients. See link::Reference/DependancySupport:: helpfile for details.

subsection::Legacy support

SerialOSCClient supports the old MonomeSerial protocol if initialized with link::Classes/SerialOSCClient#*legacy40h::, link::Classes/SerialOSCClient#*legacy64::, link::Classes/SerialOSCClient#*legacy128::, link::Classes/SerialOSCClient#*legacy256::.

section::Classes

The main SerialOSC classes are:

list::
## link::Classes/SerialOSCClient::
## link::Classes/SerialOSCGrid::
## link::Classes/SerialOSCEnc::
## link::Classes/GridKeyFunc::
## link::Classes/GridKeydef::
## link::Classes/EncDeltaFunc::
## link::Classes/EncDeltadef::
## link::Classes/EncKeyFunc::
## link::Classes/EncKeydef::
## link::Classes/TiltFunc::
## link::Classes/Tiltdef::
::

section::Examples

To try out these examples, make sure the serialosc server is running on the computer and a SerialOSC compatible grid or enc device is attached to the computer.

subsection::Hello Grid Leds

code::
SerialOSCClient.init;

SerialOSCGrid.ledSet(0, 0, true); // set top-leftmost led on the default grid lit
SerialOSCGrid.ledSet(0, 0, false); // set top-leftmost led on the default grid unlit
8 do: { SerialOSCGrid.ledSet(8.rand, 8.rand, [true, false].choose) }; // set 8 random leds in a 8x8 matrix
::

subsection::Grid Button Trigger Sine Wave

code::
SerialOSCClient.init;

s.boot; // Boot server

(
// pressing the top-leftmost button on any attached grid auditions a sinewave.
GridKeydef.press(\playSine, { a = {SinOsc.ar}.play }, 0, 0);
GridKeydef.release(\stopSine, { a.release }, 0, 0);
)

(
// Remove GridKeydefs using .free or by pressing Cmd-.
GridKeydef.press(\playSine).free;
GridKeydef.release(\stopSine).free;
)
::

subsection::Hello Scrambled World

code::
(
var scrambleLeds = {
	SerialOSCGrid.default !? { |grid|
		8 do: { grid.ledSet(8.rand, 8.rand, [true, false].choose) };
	};
};

GridKeydef.press(\playSineAndScrambleLeds, { a = {SinOsc.ar}.play; scrambleLeds.(); }, 0, 0);
GridKeydef.release(\stopSine, { a.release }, 0, 0);
)

GridKeydef.freeAll; // Free all responders
::

subsection::Hello Scrambled World (Varibright)

code::
(
var scrambleLeds = {
	SerialOSCGrid.default !? { |grid|
		8 do: { grid.ledSet(8.rand, 8.rand, SerialOSCGrid.ledLSpec.rand) };
	};
};

GridKeydef.press(\playSineAndScrambleLeds, { a = {SinOsc.ar}.play; scrambleLeds.(); }, 0, 0);
GridKeydef.release(\stopSine, { a.release }, 0, 0);
)

GridKeydef.freeAll; // Free all responders
::

subsection::Visualize Incoming Audio

code::
(
c = SerialOSCClient.grid('in') { |client|
	var onReplyReceived;
	var synth;
	var responder;
	var values = Array.fill(8) { 0 };

	client.gridRefreshAction = {
		var convertValueToBitmask = { |amp|
			(amp * 8).asInteger.collect { |i| 1 << i }.sum
		};

		client.ledMap(0, 0, values.collect{ |v| convertValueToBitmask.value(v) })
	};

	client.onFree = { [synth, responder].do (_.free) };

	onReplyReceived = { |receivedValue|
		values=values.rotate;
		values[0]=receivedValue;
		client.refreshGrid;
	};

	Server.default.waitForBoot {
		responder = OSCFunc({ |msg| onReplyReceived.value(msg[3]) }, '/level');

		synth = {
			SendReply.kr(Impulse.kr(20), '/level', Amplitude.kr(SoundIn.ar(0), 0.01, 10), 1905); // TODO: 1905 ??
		}.play(Server.default);
	};
}
)

c.free;
::

subsection::A monome and arc play together

code::
// Example, grid together with arc

(
var set_arc_led;
var scramble_8_grid_leds;
var b_spec = ControlSpec.new;

// Ensure server is running
s.serverRunning.not.if {
	Error("Boot server stored in interpreter variable s.").throw
};

// Initialize client in order to use devices
SerialOSCClient.init;

// SynthDef to server
SynthDef(\test, { |freq, gate=1| Out.ar(0, ( SinOsc.ar(Lag.kr(freq)) * EnvGen.ar(Env.cutoff, gate) ) ! 2) }).add;

// Function to visualize a float value 0 - 1.0 on first encoder ring of default arc (if attached)
set_arc_led = { |value|
	SerialOSCEnc.default !? { |enc|
		enc.clearRings;
		enc.ringSet(0, SerialOSCEnc.ledXSpec.map(value), 15);
	};
};

// Function to scramble state for 8 random buttons in a 8x8 led matrix on the default grid (if attached)
scramble_8_grid_leds = {
	SerialOSCGrid.default !? { |grid|
		8 do: { grid.ledSet(8.rand, 8.rand, [true, false].choose) };
	};
};

// Initial arc encoder setting
b = 0.5;
set_arc_led.(b);

// First Arc encoder control frequency of sinewave and scrambles 8 leds
EncDeltadef(\adjustFrequency, { |n, delta|
	b = b_spec.constrain(b + (delta/1000));
	a !? { a.set(\freq, \freq.asSpec.map(b)) };
	set_arc_led.(b);
	scramble_8_grid_leds.();
}, 0);

// Hitting any grid button auditions sinewave and scrambles 8 leds
GridKeydef.press(
	\playSine,
	{
		a ?? {
			a = Synth(\test, [\freq, \freq.asSpec.map(b)]);
			scramble_8_grid_leds.();
		};
	}
);

// Releasing any grid button stops the sinewave
GridKeydef.release(\stopSine, { a.release; a = nil });
)
::

subsection::Step Sequencer

See link::Guides/StepExample:: for details on how to create a step sequencer with SerialOSCClient.

subsection::Clip Launcher

See link::Guides/ClipExample:: for details on how to create a clip launcher with SerialOSCClient.

section::Feedback

for suggestions / comments contact me

Anton Hörnquist, anton.hornquist@gmail.com.
