title:: Dependancy support for SerialOSCClient
summary:: Notes on dependency support in SerialOSCClient
categories:: External Control
related:: Guides/UsingSerialOSCClient

section::SerialOSCClient Dependancy Support

Using dependancy support (link::Classes/Object#Dependancy::) it is possible to observe as new SerialOSC devices are attached/detached, connected/disconnected and routed/unrouted to and from clients. It is also possible to get notified when new SerialOSCGrid and SerialOSCEnc defaults are set.

subsection::General SerialOSCClient Events

code::
(
SerialOSCClient.addDependant { |thechanged, what, device, details|
	switch ( what )
	{'attached'} {
		"% was attached".format(device).postln;
	}
	{'detached'} {
		"% was detached".format(device).postln;
	}
	{'connected'} {
		"% was connected".format(device).postln;
	}
	{'disconnected'} {
		"% was disconnected".format(device).postln;
	}
	{'routed'} {
		"% was routed to %".format(device, details).postln;
	}
	{'unrouted'} {
		"% was unrouted from %".format(device, details).postln;
	}
};
)

SerialOSCClient.releaseAllDependants; // stop listening to notifications
::

subsection::SerialOSCGrid Specific Events

code::
(
SerialOSCGrid.addDependant { |thechanged, what, device, details|
	switch ( what )
	{'default'} {
		"A new SerialOSCGrid default was set: %".format(device).postln;
	};
};
)

(
// the following code assumes a default grid is set
SerialOSCGrid.default.addDependant { |thechanged, what, details|
	switch ( what )
	{'detached'} {
		"% was detached".format(thechanged).postln;
	}
	{'connected'} {
		"% was connected".format(thechanged).postln;
	}
	{'disconnected'} {
		"% was disconnected".format(thechanged).postln;
	}
	{'routed'} {
		"% was routed to %".format(thechanged, details).postln;
	}
	{'unrouted'} {
		"% was unrouted from %".format(thechanged, details).postln;
	}
	{'rotation'} {
		"% rotation was changed to %".format(thechanged, details).postln;
	}
};
)

// stop listening to notifications
SerialOSCGrid.releaseAllDependants;
SerialOSCGrid.default.releaseAllDependants;
::


subsection::Enc Specific Events

code::
(
SerialOSCEnc.addDependant { |thechanged, what, device, details|
	switch ( what )
	{'default'} {
		"New SerialOSCEnc default: %".format(device).postln;
	};
};
)

(
// the following code assumes a default enc is set
SerialOSCEnc.default.addDependant { |thechanged, what, details|
	switch ( what )
	{'detached'} {
		"% was detached".format(thechanged).postln;
	}
	{'connected'} {
		"% was connected".format(thechanged).postln;
	}
	{'disconnected'} {
		"% was disconnected".format(thechanged).postln;
	}
	{'routed'} {
		"% was routed to %".format(thechanged, details).postln;
	}
	{'unrouted'} {
		"% was unrouted from %".format(thechanged, details).postln;
	}
};
)

// stop listening to encoder notifications
SerialOSCEnc.releaseAllDependants;
SerialOSCEnc.default.releaseAllDependants;
::
