TITLE:: SerialOSCGrid
summary:: Represents a monome or other SerialOSC compliant grid connected to the computer.
categories:: External Control
related:: Guides/UsingSerialOSCClient, Classes/SerialOSCEnc

DESCRIPTION::
Represents a monome or other SerialOSC compliant grid connected to the computer.


CLASSMETHODS::

METHOD:: new
Creates a new instance. This is typically not called directly. SerialOSCClient automatically creates and maintains a list of devices.

ARGUMENT:: type
Device type

ARGUMENT:: id
Device id

ARGUMENT:: port
Device port

ARGUMENT:: rotation
Grid rotation: 0, 90, 180 or 270

returns:: An instance of SerialOSCGrid

METHOD:: all
A list of all grids currently attached to the computer as detected by SerialOSCClient.

returns:: An array of SerialOSCGrid instances

METHOD:: unrouted
A list of grids not routed to a client.

returns:: An array of SerialOSCGrid instances

METHOD:: default
Sets or gets the default grid.


SUBSECTION::Default grid led state

These methods are equivalent to instance methods of the same name below except they are invoked for the default grid, if any.

METHOD:: clearLeds
METHOD:: ledSet
METHOD:: ledLevelSet
METHOD:: ledAll
METHOD:: ledLevelAll
METHOD:: ledMap
METHOD:: ledLevelMap
METHOD:: ledRow
METHOD:: ledLevelRow
METHOD:: ledCol
METHOD:: ledLevelCol
METHOD:: ledIntensity


SUBSECTION::Default grid tilt activation

These methods are equivalent to instance methods of the same name below except they are invoked for the default grid, if any.

METHOD:: activateTilt
METHOD:: deactivateTilt
METHOD:: tiltSet

SUBSECTION::Default grid rotation and bounds

These methods are equivalent to instance methods of the same name below except they are invoked for the default grid, if any.

METHOD:: ledXSpec
METHOD:: ledYSpec
METHOD:: numButtons
METHOD:: numCols
METHOD:: numRows
METHOD:: rotation


INSTANCEMETHODS::

SUBSECTION::Led state

METHOD:: clearLeds
Clears all leds. Same as ledAll(0).

METHOD:: ledSet
Set led at (x,y) to state s (0 or 1).

Sends "/grid/led/set" message to the grid device. 

ARGUMENT:: x
Led x coordinate

ARGUMENT:: y
Led y coordinate

ARGUMENT:: state
1 (to set) or 0 (to clear)

METHOD:: ledLevelSet
Set led at (x,y) to level l.

Sends "/grid/led/level/set" message to the grid device. 

ARGUMENT:: x
Led x coordinate

ARGUMENT:: y
Led y coordinate

ARGUMENT:: l
An Integer between 0 and 15 describing led intensity

METHOD:: ledAll
Set all leds to state s (0 or 1).

Sends "/grid/led/all" message to the grid device. 

ARGUMENT:: state
1 (to set) or 0 (to clear)

METHOD:: ledLevelAll
Set all leds to level l.

Sends "/grid/led/level/all" message to the grid device. 

ARGUMENT:: l
An Integer between 0 and 15 describing led intensity

METHOD:: ledMap
Set states of a quad (8x8, 64 buttons) in a single message.

Sends "/grid/led/map" message to the grid device. 

ARGUMENT:: xOffset
An Integer describing x offset. Must be a multiple of 8.

ARGUMENT:: yOffset
An Integer describing y offset. Must be a multiple of 8.

ARGUMENT:: bitmasks
An Array of 8 Integers. Each number in the list is a bitmask of the buttons in a row, one number in the list for each row. The message will fail if the list doesn’t have 8 entries plus offsets.

METHOD:: ledLevelMap
Set levels of a quad (8x8, 64 buttons) in a single message.

Sends "/grid/led/level/map" message to the grid device. 

ARGUMENT:: xOffset
An Integer describing x offset. Must be a multiple of 8.

ARGUMENT:: yOffset
An Integer describing y offset. Must be a multiple of 8.

ARGUMENT:: levels
An Array of 64 Integers. Each number in the list describes the intensity level of a buttons in the quad.

METHOD:: ledRow
Set states of a row in a quad in a single message.

Sends "/grid/led/row" message to the grid device. 

ARGUMENT:: xOffset
An Integer describing x offset. Must be a multiple of 8.

ARGUMENT:: y
An Integer describing what row to update.

ARGUMENT:: bitmasks
An Array of Integers describing led state.

METHOD:: ledLevelRow
Set levels of a row in a quad in a single message.

Sends "/grid/led/level/row" message to the grid device. 

ARGUMENT:: xOffset
An Integer describing x offset. Must be a multiple of 8.

ARGUMENT:: y
An Integer describing what row to update.

ARGUMENT:: levels
Array of Integers between 0 and 15 describing levels.

METHOD:: ledCol
Set states of a column in a quad in a single message.

Sends "/grid/led/col" message to the grid device. 

ARGUMENT:: x
An Integer describing what col to update.

ARGUMENT:: yOffset
An Integer describing y offset. Must be a multiple of 8.

ARGUMENT:: bitmasks
An Array of Integers describing led state.

METHOD:: ledLevelCol
Set levels of a column in a quad in a single message.

Sends "/grid/led/level/col" message to the grid device. 

ARGUMENT:: x
An Integer describing what col to update.

ARGUMENT:: yOffset
An Integer describing y offset. Must be a multiple of 8.

ARGUMENT:: levels
Array of Integers between 0 and 15 describing levels.

METHOD:: ledIntensity
Change brightness of the entire grid

ARGUMENT:: i
Brightness


SUBSECTION::Tilt activation

METHOD:: activateTilt
Enable tilt sensor

ARGUMENT:: n
Tilt sensor index

METHOD:: deactivateTilt
Disable tilt sensor

ARGUMENT:: n
Tilt sensor index

METHOD:: tiltSet
Sends "/grid/tilt/set" message to the grid device. 

ARGUMENT:: n
Tilt sensor index

ARGUMENT:: state
1 = active, 0 = inactive


SUBSECTION::Grid rotation and bounds

METHOD:: ledXSpec
A ControlSpec describing the number of columns of the grid.

returns:: A ControlSpec

METHOD:: ledYSpec
A ControlSpec describing the number of rows of the grid.

returns:: A ControlSpec

METHOD:: numButtons
Return the number of buttons of this grid

returns:: An Integer

METHOD:: numCols
Return the current number of columns according to grid type and rotation

returns:: An Integer

METHOD:: numRows
Return the current number of rows according to grid type and rotation

returns:: An Integer

METHOD:: rotation
Sets or returns the rotation of the grid. Rotation is either 0, 90, 180 or 270.

Setting rotation of a grid sends a "/sys/rotation" message to the grid's device port. 

returns:: An Integer


EXAMPLES::

code::
// Plug in a grid to test

SerialOSCClient.init;

// Led examples invokes class methods which update leds of default grid, but equivalent instance methods do the same thing for any SerialOSCGrid instance

// Set single leds
SerialOSCGrid.ledSet(0, 0, 1);
SerialOSCGrid.ledSet(3, 2, 1);
SerialOSCGrid.ledSet(1, 7, 1);

// Set single leds (vari-bright)
SerialOSCGrid.ledLevelSet(0, 0, 15);
SerialOSCGrid.ledLevelSet(3, 2, 7);
SerialOSCGrid.ledLevelSet(1, 7, 2);

// Set all leds
SerialOSCGrid.ledAll(1);
SerialOSCGrid.ledAll(0);
SerialOSCGrid.ledLevelAll(2);
SerialOSCGrid.ledLevelAll(7);
SerialOSCGrid.ledLevelAll(15);
SerialOSCGrid.clearLeds; // same thing as SerialOSCGrid.ledAll(0)

// Set quads (8x8, 64 buttons)
SerialOSCGrid.ledMap(0, 0, 4, 4, 4, 4, 8, 8, 8, 8);
SerialOSCGrid.ledMap(0, 0, 254, 253, 125, 247, 239, 36, 191, 4);
SerialOSCGrid.ledMap(8, 8, 1, 2, 4, 8, 16, 32, 64, 128);

// examples (for 256)

// /grid/led/row 0 0 255 255
// /grid/led/row 8 5 255
SerialOSCGrid.ledRow(0, 0, 255, 255);
SerialOSCGrid.ledRow(8, 5, 255);

// examples (for 64)

// /grid/led/row 0 0 232
// /grid/led/row 0 3 129
SerialOSCGrid.ledRow(0, 0, 232);
SerialOSCGrid.ledRow(0, 3, 129);

// examples (for 256)

// /grid/led/col 0 0 255 255 (updates quads 1 and 3)
// /grid/led/col 13 8 255 (updates quad 4 due to offset.)
SerialOSCGrid.ledCol(0, 0, 255, 255);
SerialOSCGrid.ledCol(13, 8, 255);

// examples (for 64)

// /grid/led/col 0 0 232
// /grid/led/col 6 0 155 
SerialOSCGrid.ledCol(0, 0, 232);
SerialOSCGrid.ledCol(6, 0, 155);

// Activate tilt
Tiltdef(\test, { |...args| args.debug });
SerialOSCGrid.activateTilt(0);
SerialOSCGrid.deactivateTilt(0);
Tiltdef(\test).free;

// TODO: move to separate Reference/DependancySupport

// Using dependancy support it is possible to observe when new devices are detached, connected or disconnected. It is also possible to get notified when a new default SerialOSCGrid is set.

(
SerialOSCGrid.addDependant { |thechanged, what, device, details|
	switch ( what )
	{'default'} {
		"New SerialOSCGrid default: %".format(device).postln;
	};
};
)

(
// assumes a default grid is available
SerialOSCGrid.default.addDependant { |thechanged, what, details|
	switch ( what )
	{'detached'} {
		"% was detached".format(thechanged).postln;
	}
	{'connected'} {
		"% was connected".format(thechanged).postln;
	}
	{'disconnected'} {
		"% was disconnected".format(thechanged).postln;
	}
	{'routed'} {
		"% was routed to %".format(thechanged, details).postln;
	}
	{'unrouted'} {
		"% was unrouted from %".format(thechanged, details).postln;
	}
	{'rotation'} {
		"% rotation was changed to %".format(thechanged, details).postln;
	}
};
)

// stop listening to notifications
SerialOSCGrid.releaseAllDependants;
SerialOSCGrid.default.releaseAllDependants;
::
