TITLE:: SerialOSCClient
summary:: SuperCollider Support for SerialOSCClient devices
categories:: External Control
related:: Guides/UsingSerialOSCClient, Classes/MIDIClient

DESCRIPTION::
SerialOSCClient provides access to devices connected to your computer handled by the serialosc server (daemon).

At its core SerialOSCClient is to SerialOSC devices what link::Classes/MIDIClient:: is to MIDI devices. In addition to this, it's possible to instantiate SerialOSCClient for common use cases (single-grid, single-enc or one-grid-and-one-enc) and rely on callback functions for refresh of leds and responding to incoming events. When instantiated built-in routing capabilities can be utilized to route devices to clients (SerialOSCClient instances).

See the link::Guides/UsingSerialOSCClient:: helpfile for practical considerations and techniques for using SerialOSC devices in SuperCollider.

SUBSECTION::Device handling

SerialOSCClient differentiates each device as attached or detached, connected or disconnected and routed or unrouted.

A device emphasis::attached:: to SerialOSCClient is a device physically connected to the computer, identified by the serialosc server and tracked by SerialOSCClient. A list of attached devices is maintained in the link::#*devices:: list. An attached device does not need to have its destination port directed towards the SuperCollider langPort nor message prefix set according to SerialOSCClient requirements.

A device emphasis::connected:: to SerialOSCClient is an attached device that has its destination port routed to the SuperCollider langPort, message prefix "/monome" and maintained in the link::#*connectedDevices:: list.

A device is considered emphasis::routed:: when it is routed to any of the SerialOSCClient instances in the link::#*all:: list. A device can only be routed to one instance at any given time.

SUBSECTION::OSC handling

OSC routing between SuperCollider and the serialosc server is transparently handled by SerialOSCClient alleviating the need to use OSCFunc, OSCdef or NetAddr objects to listen to and respond to events from SerialOSC devices or update leds of a device.

To respond to events custom responder objects are used:

list::
## link::Classes/GridKeyFunc::
## link::Classes/GridKeydef::
## link::Classes/EncDeltaFunc::
## link::Classes/EncDeltadef::
## link::Classes/EncKeyFunc::
## link::Classes/EncKeydef::
## link::Classes/TiltFunc::
## link::Classes/Tiltdef::
::

To update led state device specific methods are used. Details can be found in link::Classes/SerialOSCGrid:: and link::Classes/SerialOSCEnc:: help files.

Each instantiated SerialOSCClient constitutes a self contained client handling both responding to events (via callbacks) and update of leds (via invocation of instance methods).

CLASSMETHODS::

METHOD:: init
Initializes SerialOSCClient and updates the code::devices:: list with currently attached devices. This method is asynchronous. Function completionFunc will be invoked once initialization is completed.

ARGUMENT:: completionFunc
Func to evaluate after initialization is completed.

ARGUMENT:: autoconnect
A Boolean that determines whether SerialOSCClient automatically connects discovered attached devices making them possible to match with *def and *Func responders. The default is true.

ARGUMENT:: supportHotPlugging
A Boolean that determines whether SerialOSCClient automatically discovers devices attached and detached from the computer and updates code::devices:: list continuously. The default is true.

When supportHotPlugging is set false a new call to code::init:: is needed to refresh the devices list.

ARGUMENT:: verbose
Print extended information to the Post Window. The default is false.

METHOD:: initialized
Answers whether SerialOSCClient is initialized

returns:: A Boolean

METHOD:: devices
A list of devices currently attached to the computer as detected by SerialOSCClient.

returns:: An array of SerialOSCGrid and SerialOSCEnc instances

METHOD:: connectedDevices
A list of devices currently connected to SerialOSCClient.

returns:: An array of SerialOSCGrid and SerialOSCEnc instances

METHOD:: connect
Connects an attached device to SerialOSCClient. SerialOSCClient responders only work with devices connected to SerialOSCClient.

ARGUMENT:: device
Device to connect

METHOD:: disconnect
Disconnects a device from SerialOSCClient. The disconnected device will no longer work with registered responders.

ARGUMENT:: device
Device to disconnect

METHOD:: connectAll
Connect all attached devices

METHOD:: disconnectAll
Disconnect all connected devices

METHOD:: postDevices
Prints the list of devices to the Post Window.


SUBSECTION::Spoofing actions

METHOD:: doGridKeyAction
Emulates a key state change at (x,y) to state (0 or 1, 1 = key down, 0 = key up) equivalent to a "/grid/key x y state" OSC message from a connected device.

ARGUMENT:: x
Button column

ARGUMENT:: y
Button row

ARGUMENT:: state
New key state: 0 or 1, 1 = key down, 0 = key up

ARGUMENT:: device
A connected device

METHOD:: doEncDeltaAction
Emulates a position change on encoder n by value delta (signed) equivalent to a "/enc/delta n delta" OSC message sent from a connected device. 

ARGUMENT:: n
Encoder index

ARGUMENT:: delta
Delta, clockwise is positive

ARGUMENT:: device
A connected device

METHOD:: doEncKeyAction
Emulates a key state change on encoder n to state (0 or 1, 1 = key down, 0 = key up) equivalent to a "/enc/key n state" OSC message sent from a connected device.

ARGUMENT:: n
Encoder index

ARGUMENT:: state
New key state: 0 or 1, 1 = key down, 0 = key up

ARGUMENT:: device
A connected device.

METHOD:: doTiltAction
Emulates a position change on tilt sensor n, integer (8-bit) values (x, y, z) equivalent to a "/tilt n x y z" OSC message sent from a connected device.

ARGUMENT:: n
Tilt sensor

ARGUMENT:: x
Integer value

ARGUMENT:: y
Integer value

ARGUMENT:: z
Integer value

ARGUMENT:: device
A connected device.


SUBSECTION::Instantiating SerialOSCClient

METHOD:: new
Creates a new SerialOSCClient instance for single-grid, single-enc or one-grid-and-one-enc use providing callback functions for refresh of grid and encoder leds as well as responding to grid key, tilt, encoder key and encoder delta actions.

If not already initialized, SerialOSCClient will be initialized upon creating a new instance.

ARGUMENT:: name
Name of the client. This is typically a link::Classes/Symbol::.

ARGUMENT:: gridSpec
A link::Classes/Symbol::, link::Classes/Association:: or link::Classes/Dictionary:: describing grid requirements for the client. The default is \any.

LIST::
	## Symbol \none - the client is not designed to use a grid.
	## Symbol \any - the client is designed for grids of any size.
	## An Association \numCols -> x - the client is designed for a grid with a certain number of columns
	## An Association \numRows -> y - the client is designed for a grid with a certain number of rows
	## A Dictionary (numCols: x, numRows: y) - the client is designed for a grid of a certain size
::

When a grid that do not match a client's gridSpec is routed to a client a warning is posted.

ARGUMENT:: encSpec
A link::Classes/Symbol:: or link::Classes/Integer:: describing enc requirements for the client. The default is \any.

LIST::
	## Symbol \none - the client is not designed to use a enc.
	## Symbol \any - the client is designed for encs of any size.
	## An Integer - the client is designed for an enc with a certain number of encoders
::

When an enc that do not match a client's encSpec is routed to a client a warning is posted.

ARGUMENT:: func
Client initialization link::Classes/Function:: evaluated after the instance is initialized, passed the instance as an argument. This function is typically used to set up default state and callback functions.

ARGUMENT:: autoroute
A Boolean that determine whether the client automatically routes newly connected devices, if needed. The default is true. Autorouting will try to satisfy gridSpec and encSpec but not enforce any of them.

returns:: A new instance of SerialOSCClient.

METHOD:: grid
Convenience function for creating a new SerialOSCClient instance designed for a single grid.

returns:: A new instance of SerialOSCClient with encSpec \none

METHOD:: enc
Convenience function for creating a new SerialOSCClient instance designed for a single enc.

returns:: A new instance of SerialOSCClient with gridSpec \none

METHOD:: gridEnc
Convenience function for creating a new SerialOSCClient instance designed for one grid and one enc.

returns:: A new instance of SerialOSCClient

METHOD:: all
A list of all registered SerialOSCClient instances

returns:: An Array of SerialOSCClient instances

METHOD:: freeAll
Frees all registered SerialOSCClient instances

METHOD:: route
Routes a device to a client

ARGUMENT:: device
Device to route

ARGUMENT:: client
Client to route device to


SUBSECTION::Matching encs and grids with encSpecs and gridSpecs

METHOD:: gridMatchesSpec
Answers whether a grid device matches a gridSpec.

ARGUMENT:: grid
A link::Classes/SerialOSCGrid:: instance.

ARGUMENT:: gridSpec
Grid requirements as outlined in link::#*new::.

returns:: A Boolean

METHOD:: encMatchesSpec
Answers whether an enc device matches a encSpec.

ARGUMENT:: enc
A link::Classes/SerialOSCEnc:: instance.

ARGUMENT:: encSpec
Enc requirements as outlined in link::#*new::.

returns:: A Boolean


SUBSECTION::Low level events handling

METHOD:: addSerialOSCRecvFunc
Register a Function to be evaluated whenever a SerialOSCClient event is received from one of the devices connected to SerialOSCClient. This will not overwrite any previously registered functions.

ARGUMENT:: func
A link::Classes/Function:: or similar object to be added. When evaluated, this function will be passed the arguments type, msg, time, device, corresponding to one of the link::Classes/Symbol::s '/grid/key", '/tilt', '/enc/delta', '/enc/key', the message as an Array, the time the message was sent and the device the message originates from.

METHOD:: removeSerialOSCRecvFunc
Remove a Function from the list of those evaluated whenever a SerialOSCClient event is received from one of the devices connected to SerialOSCClient. This will leave any other registered functions in place.

ARGUMENT:: func
A link::Classes/Function:: or similar object to be removed.


INSTANCEMETHODS::

METHOD:: name
Returns client name

returns:: A Symbol

METHOD:: autoroute
Answers whether this client automatically routes newly connected devices to SerialOSCClient, if needed.

returns:: A Boolean

METHOD:: gridSpec
A link::Classes/Symbol::, link::Classes/Association:: or link::Classes/Dictionary:: describing grid requirements for the client.

METHOD:: encSpec
A link::Classes/Symbol:: or link::Classes/Integer:: describing enc requirements for the client.

METHOD:: grid
Grid currently routed to this client, if any.

returns:: A link::Classes/SerialOSCGrid:: or nil

METHOD:: enc
Enc currently routed to this client, if any.

returns:: A link::Classes/SerialOSCEnc:: or nil

METHOD:: refreshGrid
Clears leds of grid currently routed to client (if any) and invokes link::#-gridRefreshAction:: to refresh leds.

METHOD:: refreshEnc
Clears leds of enc currently routed to client (if any) and invokes link::#-encRefreshAction:: to refresh leds.

METHOD:: usesGrid
Answers whether this client is designed to be used with a grid

returns:: A Boolean

METHOD:: usesEnc
Answers whether this client is designed to be used with an enc

returns:: A Boolean

METHOD:: free
Frees the client: disposes all resources, frees all responders. Invokes funcs (if any) link::#-willFree:: before freeing and link::#-onFree:: after.

METHOD:: permanent
If false, CmdPeriod will free the client. The default is false.

METHOD:: unrouteGridFromClient
Remove grid routed to a client

METHOD:: unrouteEncFromClient
Remove enc routed to a client


SUBSECTION::SerialOSCClient event responders

METHOD:: onGridRouted
Sets or gets the object to be evaluated when a new grid is routed to the client.

METHOD:: onGridUnrouted
Sets or gets the object to be evaluated when a grid is unrouted from the client.

METHOD:: onEncRouted
Sets or gets the object to be evaluated when a new enc is routed to the client.

METHOD:: onEncUnrouted
Sets or gets the object to be evaluated when a new enc is unrouted from the client.

METHOD:: gridRefreshAction
Sets or gets the object to be evaluated when a grid is refreshed, explicitly or upon getting routed to client.

METHOD:: encRefreshAction
Sets or gets the object to be evaluated when a enc is refreshed, explicitly or upon getting routed to client.

METHOD:: willFree
Sets or gets the object to be evaluated before the client is freed.

METHOD:: onFree
Sets or gets the object to be evaluated after the client is freed.


SUBSECTION::SerialOSC event responders

METHOD:: gridKeyAction
link::Classes/Function:: invoked when key state change messages are received from the grid currently routed. The Function is passed client, x, y, state and timestamp arguments.

METHOD:: tiltAction
link::Classes/Function:: invoked when tilt sensor messages are received from the grid currently routed. The Function is passed client, n, x, y, z and timestamp arguments.

METHOD:: encDeltaAction
link::Classes/Function:: invoked when enc delta messages are received from the enc currently routed. The Function is passed client, n, delta and timestamp arguments.

METHOD:: encKeyAction
link::Classes/Function:: invoked when enc key state change messages are received from the enc currently routed. The Function is passed client, n, state and timestamp arguments.


SUBSECTION::Grid tilt activation

Activate / deactivate tilt sensors of grid currently routed client, if any. Refer to link::Classes/SerialOSCGrid:: for details.

METHOD:: enableTilt
METHOD:: disableTilt
METHOD:: tiltSet


SUBSECTION::Grid led state

Update led state of grid currently routed client, if any. Refer to link::Classes/SerialOSCGrid:: for details.

METHOD:: clearLeds
METHOD:: ledSet
METHOD:: ledLevelSet
METHOD:: ledAll
METHOD:: ledLevelAll
METHOD:: ledMap
METHOD:: ledLevelMap
METHOD:: ledRow
METHOD:: ledLevelRow
METHOD:: ledCol
METHOD:: ledLevelCol
METHOD:: ledIntensity


SUBSECTION::Ring led state

Update led state of enc currently routed client, if any. Refer to link::Classes/SerialOSCEnc:: for details.

METHOD:: clearRings
METHOD:: ringSet
METHOD:: ringAll
METHOD:: ringMap
METHOD:: ringRange


EXAMPLES::

code::
(some example code)
::
