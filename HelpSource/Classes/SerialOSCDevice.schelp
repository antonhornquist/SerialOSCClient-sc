TITLE:: SerialOSCDevice
summary:: Abstract class that represents a physical SerialOSC compatible device connected to the computer
categories:: External Control
related:: Reference/UsingSerialOSCClient, Classes/SerialOSCGrid, Classes/SerialOSCEnc

DESCRIPTION::
Represents a physical SerialOSC compatible device - such as monome grid or arc - connected to the computer. Subclasses link::Classes/SerialOSCGrid:: and link::Classes/SerialOSCEnc:: are concrete implementations of this class.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: type
(describe argument here)

ARGUMENT:: id
(describe argument here)

ARGUMENT:: port
(describe argument here)

returns:: (describe returnvalue here)


INSTANCEMETHODS::

METHOD:: type
(describe method here)

returns:: (describe returnvalue here)

METHOD:: matches
(describe method here)

ARGUMENT:: that
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: prSendMsg
(describe method here)

ARGUMENT:: address
(describe argument here)

ARGUMENT:: Â ... args
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: port
(describe method here)

returns:: (describe returnvalue here)

METHOD:: printOn
(describe method here)

ARGUMENT:: stream
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: id
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

Using dependancy support it is possible to observe when new devices are attached or detached, connected or disconnected.

code::
SerialOSCClient.init;

(
SerialOSCGrid.addDependant { |thechanged, what, device|
	switch ( what )
	{'attached'} {
		("grid" + device + "was attached").postln;
	}
	{'detached'} {
		("grid" + device + "was detached").postln;
	}
	{'connected'} {
		("grid" + device + "was connected").postln;
	}
	{'disconnected'} {
		("grid" + device + "was disconnected").postln;
	}
	{'default'} {
		("grid" + device + "was set as default").postln;
	};
};
)

SerialOSCGrid.releaseAllDependants; // stop listening to grid notifications

(
SerialOSCEnc.addDependant { |thechanged, what, device|
	switch ( what )
	{'attached'} {
		("encoder" + device + "was attached").postln;
	}
	{'detached'} {
		("encoder" + device + "was detached").postln;
	}
	{'connected'} {
		("encoder" + device + "was connected").postln;
	}
	{'disconnected'} {
		("encoder" + device + "was disconnected").postln;
	}
	{'default'} {
		("encoder" + device + "was set as default").postln;
	};
};
)

SerialOSCEnc.releaseAllDependants; // stop listening to encoder notifications
::
