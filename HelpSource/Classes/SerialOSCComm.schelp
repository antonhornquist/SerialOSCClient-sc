TITLE:: SerialOSCComm
summary:: Raw communication via SerialOSC protocol
categories:: External Control
related:: Classes/SerialOSCClient

DESCRIPTION::
Class for discovery and connection of serialosc devices, retrieving device information and setting device settings using the SerialOSC protocol described in link::http://monome.org/docs/osc/::.

This class is utilized by link::Classes/SerialOSCClient:: but may also be used directly.


CLASSMETHODS::

SUBSECTION::Discovering and connecting to serialosc devices

METHOD:: requestListOfDevices
Sends "/serialosc/list" to serialosc server, listens to "/serialosc/device" responses during timeout milliseconds and finally executes func with the list of devices retrieved from serialosc. This call is asynchronous.

ARGUMENT:: func
Function to be evaluated after timeout milliseconds. The function is passed a link::Classes/List:: of information of each connected device.

ARGUMENT:: timeout
Milliseconds to wait for "/serialosc/device" messages before evaluating func.

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.

ARGUMENT:: serialOSCPort
Serialosc port. If omitted, defaultSerialOSCPort is used.

METHOD:: startTrackingConnectedDevicesChanges
Sends "/serialosc/notify" to serialosc server, starts listening to "/serialosc/add" and "/serialosc/remove" responses and executes addedFunc and removedFunc when devices are connected to or disconnected from the computer. After each response sends "/serialosc/notify" again to get updated on the next device change.

ARGUMENT:: addedFunc
Function to evaluate when a device is connected to the computer.

ARGUMENT:: removedFunc
Function to evaluate when a device is disconnected from the computer.

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.

ARGUMENT:: serialOSCPort
Serialosc port. If omitted, defaultSerialOSCPort is used.

METHOD:: isTrackingConnectedDevicesChanges

returns:: Answers whether SerialOSCComm is currently listening to device notifications.

METHOD:: stopTrackingConnectedDevicesChanges
Stops tracking "/serialosc/add" and "/serialosc/remove" responses.


SUBSECTION::To serialosc device (sys)

METHOD:: changeDeviceDestinationPort
Change destination port of device by sending "/sys/port"

ARGUMENT:: deviceReceivePort
Serialosc device port

ARGUMENT:: deviceDestinationPort
Destination port to change to

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.

METHOD:: changeDeviceDestinationHost
Change destination host of device by sending "/sys/host"

ARGUMENT:: deviceReceivePort
Serialosc device port

ARGUMENT:: deviceDestinationHost
Host to change to

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.

METHOD:: changeDeviceMessagePrefix
Change message prefix (filtering) of device by sending "/sys/prefix"

ARGUMENT:: deviceReceivePort
Serialosc device port

ARGUMENT:: deviceMessagePrefix
Prefix to change to

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.

METHOD:: changeDeviceRotation
Rotate a monome device by degrees, where degrees is one of 0, 90, 180, 270.

ARGUMENT:: deviceReceivePort
Serialosc device port

ARGUMENT:: deviceRotation
Degrees to change to

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.


SUBSECTION::To serialosc device (info)

METHOD:: requestInformationAboutDevice
Request information (settings) about a device by sending "/sys/info" to its port. Requested information consists of id, size, host, port, prefix and rotation. This call is asynchronous

ARGUMENT:: deviceReceivePort
Serialosc device port

ARGUMENT:: func
Function to be evaluated after timeout milliseconds. The function is passed a link::Classes/IdentityDictionary:: of information for the device.

ARGUMENT:: timeout
Milliseconds to wait for "/sys/id|size|host|port|prefix|rotation" messages before evaluating func.

ARGUMENT:: serialOSCHost
Serialosc host. If omitted, defaultSerialOSCHost is used.


SUBSECTION::Defaults

METHOD:: defaultSerialOSCHost
Sets or gets the default serialosc hostname. The default is "127.0.0.1".

METHOD:: defaultSerialOSCPort
Sets or gets the default serialosc port. The default is 12002.


SUBSECTION::Debugging

METHOD:: trace
Trace system messages sent and received by this class.

ARGUMENT:: on
A Boolean indicating whether to trace messages or not.


EXAMPLES::

code::
// Mocking a serialosc server

// A bunch of data structures and osc responders can be used to mock a serialoscd server

// ~devices - an Array of information for each mocked device
// ~addRemoveListeners - an Array of NetAddr corresponding to each client to get notified of next device attached / detached event

(
~setupMockSerialOSCServer = { |port|
    OSCdef(
        '/serialosc/list',
        {|msg, time, addr, recvPort|
            var host, port, replyAddr;
            host = msg[1];
            port = msg[2];
            replyAddr = NetAddr(host.asString, port.asInteger);
			msg.debug;

            ~devices.do { |entry|
                replyAddr.sendMsg(
                    "/serialosc/device",
                    entry[\id],
                    entry[\type],
                    entry[\receivePort]
                );
            };
        },
        '/serialosc/list',
        //recvPort: port
    );

    OSCdef(
        '/serialosc/notify',
        {|msg, time, addr, recvPort|
            var host, port;
            host = msg[1];
            port = msg[2];
            ~addRemoveListeners = ~addRemoveListeners.add(NetAddr(host.asString, port.asInteger));
        },
        '/serialosc/notify',
        //recvPort: port
    );
};

~teardownMockSerialOSCServer = { |port|
    OSCdef('/serialosc/list').free;
    OSCdef('/serialosc/notify').free;
};

~addMockDevice = { |device|
    var newDevice = device.copy;
    ~setupMockDeviceOSCFuncs.(newDevice);
    ~devices = ~devices.add(newDevice);
    ~notifyAddRemoveListeners.('add', newDevice[\id]);
};

~removeMockDevice = { |index|
    var device;
    device = ~devices.removeAt(index);
    device[\oscFuncs] do: _.free;
    ~notifyAddRemoveListeners.('remove', device[\id]);
};

~notifyAddRemoveListeners = { |what, id|
    ~addRemoveListeners.size.do {
        var listener;
        listener = ~addRemoveListeners.removeAt(0);
        listener.sendMsg("/serialosc/%".format(what.asString), id);
    };
};

~setupMockDeviceOSCFuncs = { |device|
    device[\oscFuncs] do: _.free;
    device[\oscFuncs] = [
        (
            responderFunc: { |msg|
                device[\destinationPort] = msg[1].asInteger;
            },
            pattern: '/sys/port'
        ),
        (
            responderFunc: { |msg|
                device[\destinationHost] = msg[1].asInteger;
            },
            pattern: '/sys/host'
        ),
        (
            responderFunc: { |msg|
                device[\prefix] = msg[1].asSymbol;
                ~setupMockDeviceOSCFuncs.(device);
            },
            pattern: '/sys/prefix'
        ),
        (
            responderFunc: { |msg|
                device[\rotation] = msg[1].asInteger;
            },
            pattern: '/sys/rotation'
        ),
        (
            responderFunc: { |msg|
                var x, y, state;
                x = msg[1].asInteger;
                y = msg[2].asInteger;
                state = msg[3].asBoolean;
                device[\ledState][y][x] = state;
                ~deviceAsString.(device).postln;
                ~plotGridLeds.(device);
            },
            pattern: device[\prefix]++"/grid/led/set"
        ),
        (
            responderFunc: { |msg|
                var n, state;
                n = msg[1].asInteger;
                state = msg[2].asBoolean;
                device[\tiltState][n] = state;
                "%: tilt sensor % %".format(device[\id], n, if (state,  "activated", "deactivated")).postln;
            },
            pattern: device[\prefix]++"/tilt/set"
        ),
        (
            responderFunc: { |msg|
                var n, x, l;
                n = msg[1].asInteger;
                x = msg[2].asInteger;
                l = msg[3].asInteger;
                "%: enc % led % set to level %".format(device[\id], n, x, l).postln;
            },
            pattern: device[\prefix]++"/ring/set"
        )
    ].collect { |def| OSCFunc(def[\responderFunc], def[\pattern].asSymbol, recvPort: device[\receivePort]) };
};

~deviceAsString = { |device|
    "%, a % with prefix % receiving at port % and sending to host % port %".format(
        device[\id], device[\type], device[\prefix], device[\receivePort], device[\destinationHost], device[\destinationPort]
    )
};

~plotGridLeds = { |device|
    device[\ledState].collect { |col|
        col.collect { |led| if (led, "# ", "- ") }.join
    }.join(Char.nl).postln;
    nil;
};

~sendGridKey = { |deviceIndex, x, y, state|
    ~devices[deviceIndex] !? { |device|
        NetAddr(device[\destinationHost], device[\destinationPort]).sendMsg(
            (device[\prefix].asString++"/grid/key").asSymbol, x.asInteger, y.asInteger, state.asInteger
        );
    };
};

~sendEncDelta = { |deviceIndex, n, delta|
    ~devices[deviceIndex] !? { |device|
        NetAddr(device[\destinationHost], device[\destinationPort]).sendMsg(
            (device[\prefix].asString++"/enc/delta").asSymbol, n.asInteger, delta.asInteger
        );
    };
};

~sendEncKey = { |deviceIndex, n, state|
    ~devices[deviceIndex] !? { |device|
        NetAddr(device[\destinationHost], device[\destinationPort]).sendMsg(
            (device[\prefix].asString++"/enc/delta").asSymbol, n.asInteger, state.asInteger
        );
    };
};

~postDevicesList = {
    ~devices.do { |device| ~deviceAsString.(device).postln };
    nil;
};
)




(
~monome64 = (
	type: 'monome 64',
	receivePort: 17000,
	id: 'm0000045',
	size: 8@8,
	destinationHost: "localhost",
	destinationPort: 17001,
	prefix: '/nubs',
	rotation: 0,
	ledState: Array.fill(8) { Array.fill(8) { false } },
	tiltState: Array.fill(1) { false }
);

~monome128 = (
	type: 'monome 128',
	receivePort: 17050,
	id: 'm0000046',
	size: 8@16,
	destinationHost: "localhost",
	destinationPort: 17051,
	prefix: '/nubs',
	rotation: 0,
	ledState: Array.fill(8) { Array.fill(16) { false } },
	tiltState: Array.fill(1) { false }
);

~arc2 = (
	type: 'arc 2',
	receivePort: 18000,
	id: 'm0000055',
	destinationHost: "localhost",
	destinationPort: 18001,
	prefix: '/nubs',
	rotation: 0
);

~arc4 = (
	type: 'arc 4',
	receivePort: 18050,
	id: 'm0000056',
	destinationHost: "localhost",
	destinationPort: 18051,
	prefix: '/nubs',
	rotation: 0
);

)

~setupMockSerialOSCServer.value(NetAddr.langPort)

SerialOSCComm.defaultSerialOSCPort = NetAddr.langPort;

SerialOSCClient.init


~addMockDevice.value(~monome64);
~addMockDevice.value(~monome128);
~addMockDevice.value(~arc2);
~addMockDevice.value(~arc4);

~plotGridLeds.(~ds[0])
~plotGridLeds.(~ds[1])

~removeMockDevice.(0);
~addMockDevice.(~ds[0]);

~postDevicesList.value;

SerialOSCGrid.default
SerialOSCGrid.ledSet(0, 0, 1);
SerialOSCGrid.ledSet(0, 0, 0);
SerialOSCGrid.ledSet(3, 0, 1);
SerialOSCGrid.ledSet(3, 0, 0);

SerialOSCEnc.default
SerialOSCEnc.default.ringSet(0, 2, 20);

SerialOSCClient.addSerialOSCRecvFunc { |...args| args.debug }

SerialOSCClient.postDevices

SerialOSCComm.requestListOfDevices("127.0.0.1", { |...args| args.debug })
SerialOSCComm.requestInformationAboutDevice("127.0.0.1", 14769, { |...args| args.debug })
::
