TITLE:: SerialOSCEnc
summary:: Represents a monome arc or other SerialOSC compliant encoder connected to the computer.
categories:: External Control
related:: Guides/UsingSerialOSCClient, Classes/SerialOSCGrid

DESCRIPTION::
Represents a monome arc or other SerialOSC compliant encoder connected to the computer.


CLASSMETHODS::

METHOD:: new
Creates a new instance. Should not be called directly. SerialOSCClient automatically creates and maintains a list of devices.

ARGUMENT:: type
Device type

ARGUMENT:: id
Device id

ARGUMENT:: port
Device port

returns:: An instance of SerialOSCEnc

METHOD:: all
A list of all encs currently connected to the computer as detected by SerialOSCClient.

returns:: An array of SerialOSCEnc instances

METHOD:: default
Sets or gets the default enc.

METHOD:: ledXSpec
A ControlSpec describing the number of leds in a ring. This is shared by all encs.

returns:: A ControlSpec


SUBSECTION::Default enc ring state

These methods are equivalent to instance methods of the same name below except they are invoked for the default enc, if any.

METHOD:: clearRings
METHOD:: ringSet
METHOD:: ringAll
METHOD:: ringMap
METHOD:: ringRange


INSTANCEMETHODS::

METHOD:: clearRings
Clears all rings.

METHOD:: ringSet
Set led x (0-63) on encoder n (0-1 or 0-3) to level l (0-15)

Sends "/ring/set"

ARGUMENT:: n
Encoder index

ARGUMENT:: x
Led index (0-63)

ARGUMENT:: level
Led level (0-15)

METHOD:: ringAll
Set all leds on encoder n (0-1 or 0-3) to level l (0-15).

Sends "/ring/all"

ARGUMENT:: n
Encoder index

ARGUMENT:: level
Led level

METHOD:: ringMap
Set all leds on encoder n (0-1 or 0-3) to 64 member array l[64].

Sends "/ring/map"

ARGUMENT:: n
Encoder index

ARGUMENT:: levels
An Array of Integers between 0 and 15 describing levels

METHOD:: ringRange
Set leds on encoder n (0-1 or 0-3) between (inclusive) x1 and x2 to level l (0-15). Direction of set is always clockwise, with wrapping.

Sends "/ring/range"

ARGUMENT:: n
Encoder index

ARGUMENT:: x1
Led index (0-63)

ARGUMENT:: x2
Led index (0-63)

ARGUMENT:: level
Led level (0-15)


SUBSECTION::Enc properties

METHOD:: getNumEncs
Return the number of encoders for this device

returns:: An Integer

METHOD:: nSpec
A ControlSpec describing the number of encoders.

returns:: A ControlSpec


EXAMPLES::

code::
// Plug in an enc

SerialOSCClient.init;

// Ring examples invokes class methods which update leds of default enc, but equivalent instance methods do the same thing for non-default SerialOSCEnc instances

// Set single led
SerialOSCEnc.ringSet(0, 0, 15);
SerialOSCEnc.ringSet(0, 5, 5);
SerialOSCEnc.ringSet(0, 10, 3);

// Set all leds
SerialOSCEnc.ringAll(1, 15);
SerialOSCEnc.ringAll(1, 10);
SerialOSCEnc.ringAll(1, 5);

// Clear leds of all rings
SerialOSCEnc.clearRings;

// Set many leds at once
SerialOSCEnc.ringMap(0, 7 ! 64);
SerialOSCEnc.ringMap(0, 64.collect { SerialOSCEnc.ledLSpec.maxval.rand }); // random levels

// Set a led range to a given level
SerialOSCEnc.ringRange(1, 15, 20, 15);
SerialOSCEnc.ringRange(1, 40, 50, 10);

// Using dependancy support it is possible to observe when new devices are attached or detached, connected or disconnected. It is also possible to get notified when a new default of either SerialOSCDevice kind is set.

(
// TODO: test what applies
SerialOSCEnc.addDependant { |thechanged, what, device|
	switch ( what )
	{'attached'} {
		("encoder" + device + "was attached").postln;
	}
	{'detached'} {
		("encoder" + device + "was detached").postln;
	}
	{'connected'} {
		("encoder" + device + "was connected").postln;
	}
	{'disconnected'} {
		("encoder" + device + "was disconnected").postln;
	}
	{'default'} {
		("encoder" + device + "was set as default").postln;
	};
};
)

SerialOSCEnc.releaseAllDependants; // stop listening to encoder notifications
::
